Kubernetes allows containers running within the cluster to interact with the Kubernetes API. This opens the door to some powerful forms of automation. But in order to ensure that this gets done securely, it is a good idea to use specialized ServiceAccounts with restricted permissions to allow containers to access the API. Here, we will discuss ServiceAccounts as they pertain to pod configuration, and we will walk through the process of specifying which ServiceAccount a pod will use to connect to the Kubernetes API.


ServiceAccounts allow conatiners running in Pods to access the Kubernetes API.
Some applications may need to interact with the cluster itself, and service accounts provide a way to let them do it securely, with properly limited permissions.


Relevant Documentation:-
https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/
https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/


Lesson Reference:-
Creating a ServiceAccount looks like this:
kubectl create serviceaccount my-serviceaccount

Use the serviceAccountName attribute in the pod spec to specify which ServiceAccount the pod should use:

apiVersion: v1
kind: Pod
metadata:
  name: my-serviceaccount-pod
spec:
  serviceAccountName: my-serviceaccount
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', "echo Hello, Kubernetes! && sleep 3600"]
